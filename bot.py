```python
import os
import logging
import time
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TestStates(StatesGroup):
    waiting_for_test_action = State()

# –õ–∏–º–∏—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
class TelegramRateLimiter:
    def __init__(self):
        self.message_count = 0
        self.last_minute = int(time.time() // 60)
        self.messages_per_minute = 0
        
    async def wait_if_needed(self):
        current_minute = int(time.time() // 60)
        if current_minute > self.last_minute:
            self.messages_per_minute = 0
            self.last_minute = current_minute
        self.message_count += 1
        self.messages_per_minute += 1
        if self.messages_per_minute >= 1200:
            wait_time = 60 - (time.time() % 60)
            logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait_time)
            self.messages_per_minute = 0
            self.last_minute = int(time.time() // 60)
        elif self.message_count % 20 == 0:
            await asyncio.sleep(1)
        elif self.message_count % 5 == 0:
            await asyncio.sleep(0.2)

rate_limiter = TelegramRateLimiter()

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    if not isinstance(text, str):
        text = str(text)
    reserved_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in reserved_chars else char for char in text)

@dp.message(Command("start"))
async def start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await rate_limiter.wait_if_needed()
    welcome_text = (
        "üé¨ *YouTube Downloader Bot \\(—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º\\)*\n\n"
        "üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫\n\n"
        "üìù *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start \\- –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help \\- –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/test \\- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–ª–∞–π–Ω\\-–∫–Ω–æ–ø–∫–∏"
    )
    await message.reply(welcome_text, parse_mode=ParseMode.MARKDOWN_V2)

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await rate_limiter.wait_if_needed()
    help_text = (
        "üÜò *–ü–æ–º–æ—â—å*\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start \\- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help \\- –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/test \\- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω\\-–∫–Ω–æ–ø–æ–∫\n\n"
        "*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:*\n"
        "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º\\. –§—É–Ω–∫—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã\\."
    )
    await message.reply(help_text, parse_mode=ParseMode.MARKDOWN_V2)

@dp.message(Command("test"))
async def test_cmd(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    await rate_limiter.wait_if_needed()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="test_confirm"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="test_cancel")
        ]
    ])
    await message.reply(
        "üß™ *–¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(TestStates.waiting_for_test_action)

@dp.callback_query()
async def handle_test_callback(query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    chat_id = query.message.chat.id
    message_id = query.message.message_id
    await query.answer()
    
    await rate_limiter.wait_if_needed()
    if query.data == "test_confirm":
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="‚úÖ *–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!*\n\n–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω\\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:  # test_cancel
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="‚ùå *–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\\.*\n\n–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω\\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await state.clear()

async def health_check(request):
    """–ü—Ä–æ—Å—Ç–æ–π health check –¥–ª—è Render.com"""
    return web.Response(text="Bot is running")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render.com"""
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    
    port = int(os.environ.get('PORT', 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        types.BotCommand(command="test", description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏")
    ]
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
        return
    
    try:
        global rate_limiter
        rate_limiter = TelegramRateLimiter()
        await start_web_server()
        await set_bot_commands()
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
```
