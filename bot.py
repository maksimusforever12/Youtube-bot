import os
import zipfile
from pytube import YouTube
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from tqdm import tqdm

TELEGRAM_TOKEN = "YOUR_BOT_TOKEN_HERE"
MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024  # 2 GB

# --- –ú–µ–Ω—é ---
main_menu = [["/start", "/help", "/cancel"]]

# --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä–æ–º ---
def download_video(link, chat_id):
    yt = YouTube(link)

    # –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (HD –∏–ª–∏ 2K)
    stream = yt.streams.filter(progressive=True, file_extension="mp4", res="1440p").first()
    if not stream:
        stream = yt.streams.filter(progressive=True, file_extension="mp4", res="1080p").first()
    if not stream:
        stream = yt.streams.filter(progressive=True, file_extension="mp4").order_by("resolution").desc().first()

    filesize = stream.filesize
    filename = f"video_{chat_id}.mp4"

    with tqdm(total=filesize, unit='B', unit_scale=True, desc="Downloading") as pbar:
        def progress(stream, chunk, bytes_remaining):
            pbar.update(len(chunk))

        yt.register_on_progress_callback(progress)
        stream.download(filename=filename)

    return filename, filesize

# --- –ê—Ä—Ö–∏–≤–∞—Ü–∏—è ---
def make_zip(filename, chat_id):
    zip_filename = f"video_{chat_id}.zip"
    with zipfile.ZipFile(zip_filename, "w") as zipf:
        zipf.write(filename, os.path.basename(filename))
    return zip_filename

# --- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ ---
def split_file(filename, chat_id):
    parts = []
    part_num = 1
    with open(filename, "rb") as f:
        while True:
            chunk = f.read(MAX_FILE_SIZE - 10 * 1024 * 1024)  # –∑–∞–ø–∞—Å 10–ú–ë
            if not chunk:
                break
            part_filename = f"video_{chat_id}_part{part_num}.mp4"
            with open(part_filename, "wb") as part_file:
                part_file.write(chunk)
            parts.append(part_filename)
            part_num += 1
    return parts

# --- –ö–æ–º–∞–Ω–¥—ã ---
def start(update, context):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üé¨ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, –∏ —è —Å–∫–∞—á–∞—é –≤–∏–¥–µ–æ.\n\n"
        "–ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —è –ø—Ä–µ–¥–ª–æ–∂—É —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ.",
        reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    )

def help_cmd(update, context):
    update.message.reply_text(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å"
    )

def cancel(update, context):
    update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ ---
def handle_message(update, context):
    chat_id = update.message.chat_id
    link = update.message.text.strip()

    update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏...")

    try:
        filename, filesize = download_video(link, chat_id)

        if filesize <= MAX_FILE_SIZE:
            # –ï—Å–ª–∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è ‚Äî –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º
            zip_filename = make_zip(filename, chat_id)
            with open(zip_filename, "rb") as f:
                context.bot.send_document(chat_id=chat_id, document=f, filename=zip_filename)
            os.remove(filename)
            os.remove(zip_filename)
        else:
            # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —Ä–∞–∑–¥–µ–ª–∏—Ç—å", callback_data="split_yes"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="split_no")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text(
                "‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–µ–ª–∏–∫–æ–º.\n"
                "–•–æ—á–µ—à—å, —è —Ä–∞–∑–¥–µ–ª—é –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 2 –ì–ë –∏ –æ—Ç–ø—Ä–∞–≤–ª—é?",
                reply_markup=reply_markup
            )
            context.user_data["filename"] = filename

    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# --- Callback –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ ---
def ask_split(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id
    filename = context.user_data.get("filename")

    if query.data == "split_yes":
        parts = split_file(filename, chat_id)
        for part in parts:
            with open(part, "rb") as f:
                context.bot.send_document(chat_id=chat_id, document=f, filename=part)
            os.remove(part)
        os.remove(filename)
        query.edit_message_text("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–∞—Å—Ç—è–º–∏.", reply_markup=None)

    elif query.data == "split_no":
        os.remove(filename)
        query.edit_message_text("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_cmd))
    dp.add_handler(CommandHandler("cancel", cancel))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(CallbackQueryHandler(ask_split))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
