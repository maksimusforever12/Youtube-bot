import os
import re
import math
import logging
from typing import Optional, List

import yt_dlp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, RegexpCommandsFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024  # 2 GB
CHUNK_SIZE = 1.9 * 1024 * 1024 * 1024  # 1.9 GB –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
DOWNLOAD_DIR = "downloads"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

def is_youtube_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ YouTube URL"""
    patterns = [
        r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/',
        r'(https?://)?youtu\.be/',
        r'(https?://)?m\.youtube\.com/',
        r'(https?://)?gaming\.youtube\.com/'
    ]
    return any(re.match(pattern, url) for pattern in patterns)

def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if not seconds:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    return f"{minutes}–º"

def format_filesize(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes == 0:
        return "0 B"
    size_names = ["B", "KB", "MB", "GB"]
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return f"{s} {size_names[i]}"

async def progress_hook(d, status_msg_id, chat_id):
    """Progress hook –¥–ª—è yt-dlp —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    if d['status'] == 'downloading':
        try:
            if 'total_bytes' in d and d['total_bytes']:
                percent = int(d['downloaded_bytes'] / d['total_bytes'] * 100)
                if percent % 10 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10% –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=status_msg_id,
                        text=f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {percent}%"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

def get_video_info(url: str) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
    ydl_opts = {
        'quiet': True,
        'no_warnings': True,
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            return info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
        return None

async def download_video(url: str, chat_id: int, status_msg_id: int) -> tuple[Optional[str], int]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Å YouTube"""
    output_template = os.path.join(DOWNLOAD_DIR, f'video_{chat_id}_%(title)s.%(ext)s')
    
    ydl_opts = {
        'outtmpl': output_template,
        'format': 'bestvideo[height>=720][height<=1440]+bestaudio/best[height>=720][height<=1440]/best',
        'merge_output_format': 'mp4',
        'writesubtitles': False,
        'writeautomaticsub': False,
        'ignoreerrors': False,
        'progress_hooks': [lambda d: dp.loop.create_task(progress_hook(d, status_msg_id, chat_id))],
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
            
            for file in os.listdir(DOWNLOAD_DIR):
                if file.startswith(f'video_{chat_id}_') and file.endswith('.mp4'):
                    filepath = os.path.join(DOWNLOAD_DIR, file)
                    filesize = os.path.getsize(filepath)
                    return filepath, filesize
            
            return None, 0
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
        return None, 0

def split_file(filepath: str, chat_id: int) -> List[str]:
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ —á–∞—Å—Ç–∏"""
    parts = []
    part_num = 1
    base_name = os.path.splitext(os.path.basename(filepath))[0]
    
    try:
        with open(filepath, "rb") as f:
            while True:
                chunk = f.read(int(CHUNK_SIZE))
                if not chunk:
                    break
                
                part_filename = os.path.join(DOWNLOAD_DIR, f"{base_name}_part{part_num:02d}.mp4")
                with open(part_filename, "wb") as part_file:
                    part_file.write(chunk)
                
                parts.append(part_filename)
                part_num += 1
                
        logger.info(f"–§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
        return parts
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        for part in parts:
            if os.path.exists(part):
                os.remove(part)
        return []

def cleanup_files(*filepaths: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    for filepath in filepaths:
        try:
            if filepath and os.path.exists(filepath):
                os.remove(filepath)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {filepath}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")

@dp.message(Command("start"))
async def start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_text = (
        "üé¨ *YouTube Downloader Bot*\n\n"
        "üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ HD/2K –∫–∞—á–µ—Å—Ç–≤–µ\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ (2+ —á–∞—Å–∞)\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n\n"
        "üìù *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ!"
    )
    await message.reply(welcome_text, parse_mode=types.ParseMode.MARKDOWN_V2)

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = (
        "üÜò *–ü–æ–º–æ—â—å*\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:*\n"
        "‚Ä¢ youtube.com/watch?v=...\n"
        "‚Ä¢ youtu.be/...\n"
        "‚Ä¢ m.youtube.com/...\n\n"
        "*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏:*\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: HD (720p) - 2K (1440p)\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏: 1.9 –ì–ë\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–¥–µ–æ –ª—é–±–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    )
    await message.reply(help_text, parse_mode=types.ParseMode.MARKDOWN_V2)

@dp.message(RegexpCommandsFilter(regexp_commands=[r'https?://.*']))
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å YouTube —Å—Å—ã–ª–∫–∞–º–∏"""
    chat_id = message.chat.id
    url = message.text.strip()
    
    if not is_youtube_url(url):
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.\n"
            "–ü—Ä–∏–º–µ—Ä: https://youtube.com/watch?v=..."
        )
        return
    
    status_msg = await message.reply("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ...")
    status_msg_id = status_msg.message_id
    
    try:
        video_info = get_video_info(url)
        if not video_info:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ."
            )
            return
        
        title = video_info.get('title', 'Unknown')
        if len(title) > 50:
            title = title[:50] + '...'
        duration = video_info.get('duration', 0)
        uploader = video_info.get('uploader', 'Unknown')
        
        info_text = (
            f"üìπ *{title.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')}*\n"
            f"üë§ {uploader.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')}\n"
            f"‚è±Ô∏è {format_duration(duration)}\n\n"
            f"üé¨ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É..."
        )
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_msg_id,
            text=info_text,
            parse_mode=types.ParseMode.MARKDOWN_V2
        )
        
        filepath, filesize = await download_video(url, chat_id, status_msg_id)
        
        if not filepath or not os.path.exists(filepath):
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filepath}, —Ä–∞–∑–º–µ—Ä: {format_filesize(filesize)}")
        
        if filesize <= MAX_FILE_SIZE:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text=f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª ({format_filesize(filesize)})..."
            )
            
            with open(filepath, 'rb') as video_file:
                await bot.send_document(
                    chat_id=chat_id,
                    document=video_file,
                    filename=os.path.basename(filepath),
                    caption=f"üé¨ {video_info.get('title', 'video')}"
                )
            
            cleanup_files(filepath)
            await bot.delete_message(chat_id=chat_id, message_id=status_msg_id)
            
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —Ä–∞–∑–¥–µ–ª–∏—Ç—å", callback_data="split_yes"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="split_no")
                ]
            ])
            
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text=(
                    f"‚ö†Ô∏è *–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π*\n\n"
                    f"üìÅ –†–∞–∑–º–µ—Ä: {format_filesize(filesize)}\n"
                    f"üìè –ë—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ ~{math.ceil(filesize / CHUNK_SIZE)} —á–∞—Å—Ç–µ–π\n\n"
                    f"–†–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏?"
                ),
                reply_markup=keyboard,
                parse_mode=types.ParseMode.MARKDOWN
            )
            
            dp.storage_data[chat_id] = {"filepath": filepath, "title": video_info.get('title', 'video')}
    
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_msg_id,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )
        if 'filepath' in locals() and filepath:
            cleanup_files(filepath)

@dp.callback_query()
async def handle_split_callback(query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    chat_id = query.message.chat.id
    message_id = query.message.message_id
    data = dp.storage_data.get(chat_id, {})
    filepath = data.get("filepath")
    title = data.get("title", "video")
    
    await query.answer()
    
    if query.data == "split_yes":
        if not filepath or not os.path.exists(filepath):
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            return
        
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="‚úÇÔ∏è –†–∞–∑–¥–µ–ª—è—é —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏..."
        )
        
        try:
            parts = split_file(filepath, chat_id)
            
            if not parts:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞."
                )
                cleanup_files(filepath)
                return
            
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(parts)} —á–∞—Å—Ç–µ–π..."
            )
            
            for i, part_path in enumerate(parts, 1):
                try:
                    with open(part_path, 'rb') as part_file:
                        await bot.send_document(
                            chat_id=chat_id,
                            document=part_file,
                            filename=os.path.basename(part_path),
                            caption=f"üé¨ {title} - –ß–∞—Å—Ç—å {i}/{len(parts)}"
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i}: {e}")
            
            cleanup_files(filepath, *parts)
            
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"‚úÖ *–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\nüìÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–∞—Å—Ç–µ–π: {len(parts)}",
                parse_mode=types.ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            )
            cleanup_files(filepath)
    
    else:  # split_no
        if filepath:
            cleanup_files(filepath)
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
    
    dp.storage_data.pop(chat_id, None)

async def on_startup():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    webhook_path = f"/{TELEGRAM_TOKEN}"
    webhook_url = f"{WEBHOOK_URL}{webhook_path}"
    await bot.set_webhook(url=webhook_url)
    logger.info(f"üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

async def on_shutdown():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    await bot.delete_webhook()
    logger.info("üöÄ Webhook —É–¥–∞–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
        return
    
    if not WEBHOOK_URL:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    app = web.Application()
    webhook_path = f"/{TELEGRAM_TOKEN}"
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=webhook_path)
    setup_application(app, dp, bot=bot)
    
    port = int(os.environ.get('PORT', 8443))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    web.run_app(app, host='0.0.0.0', port=port)

if __name__ == "__main__":
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    main()
