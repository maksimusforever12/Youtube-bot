import os
import re
import math
import logging
from typing import Optional, List

import yt_dlp
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "YOUR_BOT_TOKEN_HERE"
MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024  # 2 GB
CHUNK_SIZE = 1.9 * 1024 * 1024 * 1024  # 1.9 GB –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
DOWNLOAD_DIR = "downloads"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

def is_youtube_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ YouTube URL"""
    patterns = [
        r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/',
        r'(https?://)?youtu\.be/',
        r'(https?://)?m\.youtube\.com/',
        r'(https?://)?gaming\.youtube\.com/'
    ]
    return any(re.match(pattern, url) for pattern in patterns)

def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if not seconds:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    return f"{minutes}–º"

def format_filesize(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes == 0:
        return "0 B"
    size_names = ["B", "KB", "MB", "GB"]
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return f"{s} {size_names[i]}"

def progress_hook(d):
    """–ü—Ä–æ—Å—Ç–æ–π progress hook –¥–ª—è yt-dlp"""
    if d['status'] == 'downloading':
        try:
            if 'total_bytes' in d and d['total_bytes']:
                percent = int(d['downloaded_bytes'] / d['total_bytes'] * 100)
                if percent % 25 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 25%
                    print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {percent}%")
        except:
            pass

def get_video_info(url: str) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
    ydl_opts = {
        'quiet': True,
        'no_warnings': True,
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            return info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
        return None

def download_video(url: str, chat_id: int) -> tuple[Optional[str], int]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Å YouTube"""
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    output_template = os.path.join(DOWNLOAD_DIR, f'video_{chat_id}_%(title)s.%(ext)s')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º HD/2K –∫–∞—á–µ—Å—Ç–≤–∞
    ydl_opts = {
        'outtmpl': output_template,
        'format': 'bestvideo[height>=720][height<=1440]+bestaudio/best[height>=720][height<=1440]/best',
        'merge_output_format': 'mp4',
        'writesubtitles': False,
        'writeautomaticsub': False,
        'ignoreerrors': False,
        'progress_hooks': [progress_hook],
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            ydl.download([url])
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            for file in os.listdir(DOWNLOAD_DIR):
                if file.startswith(f'video_{chat_id}_') and file.endswith('.mp4'):
                    filepath = os.path.join(DOWNLOAD_DIR, file)
                    filesize = os.path.getsize(filepath)
                    return filepath, filesize
            
            return None, 0
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
        return None, 0

def split_file(filepath: str, chat_id: int) -> List[str]:
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ —á–∞—Å—Ç–∏"""
    parts = []
    part_num = 1
    base_name = os.path.splitext(os.path.basename(filepath))[0]
    
    try:
        with open(filepath, "rb") as f:
            while True:
                chunk = f.read(int(CHUNK_SIZE))
                if not chunk:
                    break
                
                part_filename = os.path.join(DOWNLOAD_DIR, f"{base_name}_part{part_num:02d}.mp4")
                with open(part_filename, "wb") as part_file:
                    part_file.write(chunk)
                
                parts.append(part_filename)
                part_num += 1
                
        logger.info(f"–§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
        return parts
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        # –û—á–∏—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        for part in parts:
            if os.path.exists(part):
                os.remove(part)
        return []

def cleanup_files(*filepaths: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    for filepath in filepaths:
        try:
            if filepath and os.path.exists(filepath):
                os.remove(filepath)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {filepath}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_text = (
        "üé¨ *YouTube Downloader Bot*\n\n"
        "üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ HD/2K –∫–∞—á–µ—Å—Ç–≤–µ\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ (2\\+ —á–∞—Å–∞)\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n\n"
        "üìù *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\\!"
    )
    await update.message.reply_text(welcome_text, parse_mode='MarkdownV2')

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = (
        "üÜò *–ü–æ–º–æ—â—å*\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start \\- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help \\- –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:*\n"
        "‚Ä¢ youtube\\.com/watch?v=\\.\\.\\.\n"
        "‚Ä¢ youtu\\.be/\\.\\.\\.\n"
        "‚Ä¢ m\\.youtube\\.com/\\.\\.\\.\n\n"
        "*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏:*\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: HD \\(720p\\) \\- 2K \\(1440p\\)\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏: 1\\.9 –ì–ë\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–¥–µ–æ –ª—é–±–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    )
    await update.message.reply_text(help_text, parse_mode='MarkdownV2')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å YouTube —Å—Å—ã–ª–∫–∞–º–∏"""
    chat_id = update.message.chat_id
    url = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
    if not is_youtube_url(url):
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.\n"
            "–ü—Ä–∏–º–µ—Ä: https://youtube.com/watch?v=..."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status_msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        video_info = get_video_info(url)
        if not video_info:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ.")
            return
        
        title = video_info.get('title', 'Unknown')
        if len(title) > 50:
            title = title[:50] + '...'
        duration = video_info.get('duration', 0)
        uploader = video_info.get('uploader', 'Unknown')
        
        info_text = (
            f"üìπ *{title.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')}*\n"
            f"üë§ {uploader.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')}\n"
            f"‚è±Ô∏è {format_duration(duration)}\n\n"
            f"üé¨ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É\\.\\.\\."
        )
        await status_msg.edit_text(info_text, parse_mode='MarkdownV2')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        filepath, filesize = download_video(url, chat_id)
        
        if not filepath or not os.path.exists(filepath):
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filepath}, —Ä–∞–∑–º–µ—Ä: {format_filesize(filesize)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if filesize <= MAX_FILE_SIZE:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–¥–∏–Ω —Ñ–∞–π–ª
            await status_msg.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª ({format_filesize(filesize)})...")
            
            with open(filepath, 'rb') as video_file:
                await context.bot.send_document(
                    chat_id=chat_id,
                    document=video_file,
                    filename=os.path.basename(filepath),
                    caption=f"üé¨ {video_info.get('title', 'video')}"
                )
            
            cleanup_files(filepath)
            await status_msg.delete()
            
        else:
            # –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —Ä–∞–∑–¥–µ–ª–∏—Ç—å", callback_data="split_yes"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="split_no")
                ]
            ]
            
            await status_msg.edit_text(
                f"‚ö†Ô∏è *–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π*\n\n"
                f"üìÅ –†–∞–∑–º–µ—Ä: {format_filesize(filesize)}\n"
                f"üìè –ë—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ ~{math.ceil(filesize / CHUNK_SIZE)} —á–∞—Å—Ç–µ–π\n\n"
                f"–†–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏?",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data["filepath"] = filepath
            context.user_data["title"] = video_info.get('title', 'video')
    
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await status_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if 'filepath' in locals() and filepath:
            cleanup_files(filepath)

async def handle_split_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    filepath = context.user_data.get("filepath")
    title = context.user_data.get("title", "video")
    
    if query.data == "split_yes":
        if not filepath or not os.path.exists(filepath):
            await query.edit_message_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        await query.edit_message_text("‚úÇÔ∏è –†–∞–∑–¥–µ–ª—è—é —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏...")
        
        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª
            parts = split_file(filepath, chat_id)
            
            if not parts:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞.")
                cleanup_files(filepath)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            await query.edit_message_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(parts)} —á–∞—Å—Ç–µ–π...")
            
            for i, part_path in enumerate(parts, 1):
                try:
                    with open(part_path, 'rb') as part_file:
                        await context.bot.send_document(
                            chat_id=chat_id,
                            document=part_file,
                            filename=os.path.basename(part_path),
                            caption=f"üé¨ {title} - –ß–∞—Å—Ç—å {i}/{len(parts)}"
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i}: {e}")
            
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
            cleanup_files(filepath, *parts)
            
            await query.edit_message_text(
                f"‚úÖ *–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n"
                f"üìÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–∞—Å—Ç–µ–π: {len(parts)}",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            cleanup_files(filepath)
    
    else:  # split_no
        if filepath:
            cleanup_files(filepath)
        await query.edit_message_text("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if TELEGRAM_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û–®–ò–ë–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TELEGRAM_TOKEN")
        print("–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ —É @BotFather –≤ Telegram")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help_cmd))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(CallbackQueryHandler(handle_split_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()
