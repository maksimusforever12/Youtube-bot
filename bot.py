import os
import re
import math
import logging
import subprocess
import json
import time
import asyncio
from typing import Optional, List

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024  # 2 –ì–ë
CHUNK_SIZE = 1.9 * 1024 * 1024 * 1024  # 1.9 –ì–ë –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
DOWNLOAD_DIR = "downloads"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class VideoStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_split = State()

# –õ–∏–º–∏—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
class TelegramRateLimiter:
    def __init__(self):
        self.message_count = 0
        self.last_minute = int(time.time() // 60)
        self.messages_per_minute = 0
        
    async def wait_if_needed(self):
        current_minute = int(time.time() // 60)
        if current_minute > self.last_minute:
            self.messages_per_minute = 0
            self.last_minute = current_minute
        self.message_count += 1
        self.messages_per_minute += 1
        if self.messages_per_minute >= 1200:
            wait_time = 60 - (time.time() % 60)
            logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait_time)
            self.messages_per_minute = 0
            self.last_minute = int(time.time() // 60)
        elif self.message_count % 20 == 0:
            await asyncio.sleep(1)
        elif self.message_count % 5 == 0:
            await asyncio.sleep(0.2)

rate_limiter = TelegramRateLimiter()

def check_dependencies() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è yt-dlp –∏ ffmpeg"""
    try:
        subprocess.run(["yt-dlp", "--version"], capture_output=True, check=True)
        subprocess.run(["ffmpeg", "-version"], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ yt-dlp –∏ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ PATH.")
        return False

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    if not isinstance(text, str):
        text = str(text)
    reserved_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in reserved_chars else char for char in text)

def is_youtube_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ YouTube URL"""
    patterns = [
        r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/',
        r'(https?://)?youtu\.be/',
        r'(https?://)?m\.youtube\.com/',
        r'(https?://)?gaming\.youtube\.com/'
    ]
    return any(re.match(pattern, url) for pattern in patterns)

def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if not seconds:
        return escape_markdown_v2("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    if hours > 0:
        return escape_markdown_v2(f"{hours}—á {minutes}–º")
    return escape_markdown_v2(f"{minutes}–º")

def format_filesize(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes == 0:
        return escape_markdown_v2("0 B")
    size_names = ["B", "KB", "MB", "GB"]
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return escape_markdown_v2(f"{s} {size_names[i]}")

async def progress_hook(process: subprocess.Popen, status_msg_id: int, chat_id: int):
    """Progress hook –¥–ª—è yt-dlp —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    while process.poll() is None:
        try:
            line = process.stdout.readline().strip()
            if "download" in line.lower():
                try:
                    percent = float(line.split()[1].strip('%'))
                    if percent % 10 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10%
                        await rate_limiter.wait_if_needed()
                        await bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=status_msg_id,
                            text=escape_markdown_v2(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {percent:.1f}%"),
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                except (IndexError, ValueError):
                    pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ progress_hook: {e}")
        await asyncio.sleep(0.1)

def get_video_info(url: str) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ subprocess"""
    if not check_dependencies():
        return None
    
    cmd = [
        "yt-dlp",
        "--dump-json",
        "--no-warnings",
        "--ignore-errors",
        "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "--sleep-requests", "1",
        "--extractor-retries", "5",
        "--socket-timeout", "30"
    ]
    if os.path.exists("cookies.txt"):
        cmd.extend(["--cookies", "cookies.txt"])
    cmd.append(url)
    
    try:
        result = subprocess.run(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=300
        )
        if result.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result.stderr.strip()}")
            return None
        data_json = json.loads(result.stdout.strip())
        return data_json
    except (subprocess.TimeoutExpired, json.JSONDecodeError, FileNotFoundError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return None

async def download_video(url: str, chat_id: int, status_msg_id: int) -> tuple[Optional[str], int]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ subprocess"""
    if not check_dependencies():
        return None, 0
    
    output_template = os.path.join(DOWNLOAD_DIR, f'video_{chat_id}_%(title)s.%(ext)s')
    
    cmd = [
        "yt-dlp",
        "--output", output_template,
        "--format", "bestvideo[height>=1080][height<=1440]+bestaudio/best[height>=1080][height<=1440]/best",
        "--merge-output-format", "mp4",
        "--no-warnings",
        "--ignore-errors",
        "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "--sleep-requests", "1",
        "--extractor-retries", "5",
        "--socket-timeout", "30",
        "--progress", "dot"
    ]
    if os.path.exists("cookies.txt"):
        cmd.extend(["--cookies", "cookies.txt"])
    cmd.append(url)
    
    try:
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        asyncio.create_task(progress_hook(process, status_msg_id, chat_id))
        
        stdout, stderr = await process.communicate()
        if process.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {stderr}")
            return None, 0
        
        for file in os.listdir(DOWNLOAD_DIR):
            if file.startswith(f'video_{chat_id}_') and file.endswith('.mp4'):
                filepath = os.path.join(DOWNLOAD_DIR, file)
                filesize = os.path.getsize(filepath)
                return filepath, filesize
        
        return None, 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None, 0

def split_file(filepath: str, chat_id: int) -> List[str]:
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ —á–∞—Å—Ç–∏"""
    parts = []
    part_num = 1
    base_name = os.path.splitext(os.path.basename(filepath))[0]
    
    try:
        with open(filepath, "rb") as f:
            while True:
                chunk = f.read(int(CHUNK_SIZE))
                if not chunk:
                    break
                part_filename = os.path.join(DOWNLOAD_DIR, f"{base_name}_part{part_num:02d}.mp4")
                with open(part_filename, "wb") as part_file:
                    part_file.write(chunk)
                parts.append(part_filename)
                part_num += 1
        logger.info(f"–§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
        return parts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        for part in parts:
            if os.path.exists(part):
                os.remove(part)
        return []

def cleanup_files(*filepaths: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    for filepath in filepaths:
        try:
            if filepath and os.path.exists(filepath):
                os.remove(filepath)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {filepath}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await rate_limiter.wait_if_needed()
    welcome_text = escape_markdown_v2(
        "üé¨ *YouTube Downloader Bot*\n\n"
        "üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ 1080p‚Äì2K –∫–∞—á–µ—Å—Ç–≤–µ\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ (2+ —á–∞—Å–∞)\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤\n\n"
        "üìù *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )
    await message.reply(welcome_text, parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(VideoStates.waiting_for_url)

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await rate_limiter.wait_if_needed()
    help_text = escape_markdown_v2(
        "üÜò *–ü–æ–º–æ—â—å*\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "*–ö–∞–∫ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ:*\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ. –í–∏–¥–µ–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ 1080p‚Äì2K –∫–∞—á–µ—Å—Ç–≤–µ. –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—Å–∏—Ç 2 –ì–ë, –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª.\n\n"
        "*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:*\n"
        "‚Ä¢ youtube.com/watch?v=...\n"
        "‚Ä¢ youtu.be/...\n"
        "‚Ä¢ m.youtube.com/..."
    )
    await message.reply(help_text, parse_mode=ParseMode.MARKDOWN_V2)

@dp.message(VideoStates.waiting_for_url)
async def handle_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube URL"""
    url = message.text.strip()
    if not is_youtube_url(url):
        await rate_limiter.wait_if_needed()
        await message.reply(
            escape_markdown_v2("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    await rate_limiter.wait_if_needed()
    status_msg = await message.reply(
        escape_markdown_v2("üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤–∏–¥–µ–æ..."),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    
    if not check_dependencies():
        await rate_limiter.wait_if_needed()
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=status_msg.message_id,
            text=escape_markdown_v2("‚ùå –û—à–∏–±–∫–∞: yt-dlp –∏–ª–∏ ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    video_info = get_video_info(url)
    if not video_info:
        await rate_limiter.wait_if_needed()
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=status_msg.message_id,
            text=escape_markdown_v2("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ cookies.txt."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    title = video_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ')
    duration = video_info.get('duration', 0)
    filesize_approx = video_info.get('filesize_approx', 0)
    
    await rate_limiter.wait_if_needed()
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=status_msg.message_id,
        text=escape_markdown_v2(
            f"üìπ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}\n"
            f"‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {format_duration(duration)}\n"
            f"üì¶ *–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä:* {format_filesize(filesize_approx)}\n\n"
            "üì• –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É..."
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    
    filepath, filesize = await download_video(url, message.chat.id, status_msg.message_id)
    if not filepath:
        await rate_limiter.wait_if_needed()
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=status_msg.message_id,
            text=escape_markdown_v2("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    if filesize <= MAX_FILE_SIZE:
        await rate_limiter.wait_if_needed()
        try:
            with open(filepath, 'rb') as video_file:
                await message.reply_video(
                    video=types.FSInputFile(filepath),
                    caption=escape_markdown_v2(f"üé• {title}"),
                    parse_mode=ParseMode.MARKDOWN_V2,
                    duration=duration if duration else None
                )
            cleanup_files(filepath)
            await bot.delete_message(message.chat.id, status_msg.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text=escape_markdown_v2("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            cleanup_files(filepath)
        return
    
    await rate_limiter.wait_if_needed()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –†–∞–∑–¥–µ–ª–∏—Ç—å", callback_data=f"split_{filepath}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        ]
    ])
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=status_msg.message_id,
        text=escape_markdown_v2(
            f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({format_filesize(filesize)}). –•–æ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏?"
        ),
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(VideoStates.waiting_for_split)
    await state.update_data(filepath=filepath, original_message_id=message.message_id)

@dp.callback_query()
async def handle_callback(query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
    chat_id = query.message.chat.id
    message_id = query.message.message_id
    await query.answer()
    
    await rate_limiter.wait_if_needed()
    if query.data == "cancel":
        data = await state.get_data()
        filepath = data.get('filepath')
        cleanup_files(filepath)
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=escape_markdown_v2("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –§–∞–π–ª —É–¥–∞–ª—ë–Ω."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.clear()
    elif query.data.startswith("split_"):
        filepath = query.data[len("split_"):]
        if not os.path.exists(filepath):
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=escape_markdown_v2("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ."),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.clear()
            return
        
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=escape_markdown_v2("‚úÇÔ∏è –†–∞–∑–¥–µ–ª—è—é –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏..."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        parts = split_file(filepath, chat_id)
        if not parts:
            cleanup_files(filepath)
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=escape_markdown_v2("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.clear()
            return
        
        await rate_limiter.wait_if_needed()
        for i, part in enumerate(parts, 1):
            try:
                with open(part, 'rb') as part_file:
                    await bot.send_video(
                        chat_id=chat_id,
                        video=types.FSInputFile(part),
                        caption=escape_markdown_v2(f"üé• –ß–∞—Å—Ç—å {i} –∏–∑ {len(parts)}"),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i}: {e}")
                await bot.send_message(
                    chat_id=chat_id,
                    text=escape_markdown_v2(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i}."),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                # Fallback: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                try:
                    with open(part, 'rb') as part_file:
                        await bot.send_document(
                            chat_id=chat_id,
                            document=types.FSInputFile(part),
                            caption=escape_markdown_v2(f"üé• –ß–∞—Å—Ç—å {i} –∏–∑ {len(parts)} (–¥–æ–∫—É–º–µ–Ω—Ç)"),
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                except Exception as e2:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i} –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e2}")

        cleanup_files(filepath, *parts)
        await bot.delete_message(chat_id, message_id)
        await state.clear()

async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    ]
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
        return
    
    if not check_dependencies():
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã yt-dlp –∏–ª–∏ ffmpeg. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH.")
        return
    
    try:
        global rate_limiter
        rate_limiter = TelegramRateLimiter()
        await set_bot_commands()
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
