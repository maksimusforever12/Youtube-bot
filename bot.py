import os
import re
import math
import logging
import subprocess
import json
import time
import asyncio
from typing import Optional, List

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è health check
MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024  # 2 GB
CHUNK_SIZE = 1.9 * 1024 * 1024 * 1024  # 1.9 GB –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
DOWNLOAD_DIR = "downloads"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class VideoStates(StatesGroup):
    waiting_for_split = State()

# –õ–∏–º–∏—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç-–±–æ—Ç–∞)
class TelegramRateLimiter:
    def __init__(self):
        self.message_count = 0
        self.last_minute = int(time.time() // 60)
        self.messages_per_minute = 0
        
    async def wait_if_needed(self):
        current_minute = int(time.time() // 60)
        if current_minute > self.last_minute:
            self.messages_per_minute = 0
            self.last_minute = current_minute
        self.message_count += 1
        self.messages_per_minute += 1
        if self.messages_per_minute >= 1200:
            wait_time = 60 - (time.time() % 60)
            logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait_time)
            self.messages_per_minute = 0
            self.last_minute = int(time.time() // 60)
        elif self.message_count % 20 == 0:
            await asyncio.sleep(1)
        elif self.message_count % 5 == 0:
            await asyncio.sleep(0.2)

rate_limiter = TelegramRateLimiter()

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    reserved_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in reserved_chars else char for char in text)

def is_youtube_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ YouTube URL"""
    patterns = [
        r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/',
        r'(https?://)?youtu\.be/',
        r'(https?://)?m\.youtube\.com/',
        r'(https?://)?gaming\.youtube\.com/'
    ]
    return any(re.match(pattern, url) for pattern in patterns)

def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if not seconds:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    return f"{minutes}–º"

def format_filesize(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes == 0:
        return "0 B"
    size_names = ["B", "KB", "MB", "GB"]
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return f"{s} {size_names[i]}"

async def progress_hook(process: subprocess.Popen, status_msg_id: int, chat_id: int):
    """Progress hook –¥–ª—è yt-dlp —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    while process.poll() is None:
        line = process.stdout.readline().strip()
        if "download" in line.lower():
            try:
                percent = float(line.split()[1].strip('%'))
                if percent % 10 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10%
                    await rate_limiter.wait_if_needed()
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=status_msg_id,
                        text=f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {percent:.1f}%"
                    )
            except (IndexError, ValueError):
                pass
        await asyncio.sleep(0.1)

def get_video_info(url: str) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ subprocess"""
    cmd = [
        "yt-dlp",
        "--dump-json",
        "--no-warnings",
        "--ignore-errors",
        "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "--sleep-requests", "1",
        "--extractor-retries", "5",
        "--socket-timeout", "30",
        url
    ]
    
    try:
        result = subprocess.run(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=300
        )
        if result.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result.stderr.strip()}")
            return None
        data_json = json.loads(result.stdout.strip())
        return data_json
    except (subprocess.TimeoutExpired, json.JSONDecodeError, Exception) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return None

async def download_video(url: str, chat_id: int, status_msg_id: int) -> tuple[Optional[str], int]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ subprocess"""
    output_template = os.path.join(DOWNLOAD_DIR, f'video_{chat_id}_%(title)s.%(ext)s')
    
    cmd = [
        "yt-dlp",
        "--output", output_template,
        "--format", "bestvideo[height>=720][height<=1440]+bestaudio/best[height>=720][height<=1440]/best",
        "--merge-output-format", "mp4",
        "--no-warnings",
        "--ignore-errors",
        "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "--sleep-requests", "1",
        "--extractor-retries", "5",
        "--socket-timeout", "30",
        "--progress", "dot",
        url
    ]
    
    try:
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(progress_hook(process, status_msg_id, chat_id))
        
        stdout, stderr = await process.communicate()
        if process.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {stderr}")
            return None, 0
        
        for file in os.listdir(DOWNLOAD_DIR):
            if file.startswith(f'video_{chat_id}_') and file.endswith('.mp4'):
                filepath = os.path.join(DOWNLOAD_DIR, file)
                filesize = os.path.getsize(filepath)
                return filepath, filesize
        
        return None, 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None, 0

def split_file(filepath: str, chat_id: int) -> List[str]:
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ —á–∞—Å—Ç–∏"""
    parts = []
    part_num = 1
    base_name = os.path.splitext(os.path.basename(filepath))[0]
    
    try:
        with open(filepath, "rb") as f:
            while True:
                chunk = f.read(int(CHUNK_SIZE))
                if not chunk:
                    break
                part_filename = os.path.join(DOWNLOAD_DIR, f"{base_name}_part{part_num:02d}.mp4")
                with open(part_filename, "wb") as part_file:
                    part_file.write(chunk)
                parts.append(part_filename)
                part_num += 1
        logger.info(f"–§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
        return parts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        for part in parts:
            if os.path.exists(part):
                os.remove(part)
        return []

def cleanup_files(*filepaths: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    for filepath in filepaths:
        try:
            if filepath and os.path.exists(filepath):
                os.remove(filepath)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {filepath}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")

@dp.message(Command("start"))
async def start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await rate_limiter.wait_if_needed()
    welcome_text = (
        "üé¨ *YouTube Downloader Bot*\n\n"
        "üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ HD/2K –∫–∞—á–µ—Å—Ç–≤–µ\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ (2+ —á–∞—Å–∞)\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n\n"
        "üìù *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ!"
    )
    await message.reply(welcome_text, parse_mode=ParseMode.MARKDOWN_V2)

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await rate_limiter.wait_if_needed()
    help_text = (
        "üÜò *–ü–æ–º–æ—â—å*\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:*\n"
        "‚Ä¢ youtube.com/watch?v=...\n"
        "‚Ä¢ youtu.be/...\n"
        "‚Ä¢ m.youtube.com/...\n\n"
        "*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏:*\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: HD (720p) - 2K (1440p)\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏: 1.9 –ì–ë\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–¥–µ–æ –ª—é–±–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    )
    await message.reply(help_text, parse_mode=ParseMode.MARKDOWN_V2)

@dp.message(lambda message: is_youtube_url(message.text.strip()))
async def handle_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å YouTube —Å—Å—ã–ª–∫–∞–º–∏"""
    await rate_limiter.wait_if_needed()
    chat_id = message.chat.id
    url = message.text.strip()
    
    status_msg = await message.reply("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ...")
    status_msg_id = status_msg.message_id
    
    try:
        video_info = get_video_info(url)
        if not video_info:
            await rate_limiter.wait_if_needed()
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ."
            )
            return
        
        title = video_info.get('title', 'Unknown')
        if len(title) > 50:
            title = title[:50] + '...'
        title = escape_markdown_v2(title)
        uploader = escape_markdown_v2(video_info.get('uploader', 'Unknown'))
        duration = video_info.get('duration', 0)
        
        info_text = (
            f"üìπ *{title}*\n"
            f"üë§ {uploader}\n"
            f"‚è±Ô∏è {format_duration(duration)}\n\n"
            f"üé¨ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É..."
        )
        await rate_limiter.wait_if_needed()
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_msg_id,
            text=info_text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        filepath, filesize = await download_video(url, chat_id, status_msg_id)
        
        if not filepath or not os.path.exists(filepath):
            await rate_limiter.wait_if_needed()
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filepath}, —Ä–∞–∑–º–µ—Ä: {format_filesize(filesize)}")
        
        if filesize <= MAX_FILE_SIZE:
            await rate_limiter.wait_if_needed()
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text=f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª ({escape_markdown_v2(format_filesize(filesize))})..."
            )
            
            with open(filepath, 'rb') as video_file:
                await rate_limiter.wait_if_needed()
                await bot.send_document(
                    chat_id=chat_id,
                    document=video_file,
                    filename=os.path.basename(filepath),
                    caption=f"üé¨ {escape_markdown_v2(video_info.get('title', 'video'))}",
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            
            cleanup_files(filepath)
            await rate_limiter.wait_if_needed()
            await bot.delete_message(chat_id=chat_id, message_id=status_msg_id)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —Ä–∞–∑–¥–µ–ª–∏—Ç—å", callback_data="split_yes"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="split_no")
                ]
            ])
            
            await rate_limiter.wait_if_needed()
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text=(
                    f"‚ö†Ô∏è *–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π*\n\n"
                    f"üìÅ –†–∞–∑–º–µ—Ä: {escape_markdown_v2(format_filesize(filesize))}\n"
                    f"üìè –ë—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ ~{math.ceil(filesize / CHUNK_SIZE)} —á–∞—Å—Ç–µ–π\n\n"
                    f"–†–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏?"
                ),
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            
            await state.update_data(filepath=filepath, title=video_info.get('title', 'video'), status_msg_id=status_msg_id)
            await state.set_state(VideoStates.waiting_for_split)
    
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await rate_limiter.wait_if_needed()
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_msg_id,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {escape_markdown_v2(str(e))}"
        )
        if 'filepath' in locals() and filepath:
            cleanup_files(filepath)

@dp.callback_query()
async def handle_split_callback(query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    chat_id = query.message.chat.id
    message_id = query.message.message_id
    data = await state.get_data()
    filepath = data.get("filepath")
    title = escape_markdown_v2(data.get("title", "video"))
    
    await query.answer()
    
    if query.data == "split_yes":
        if not filepath or not os.path.exists(filepath):
            await rate_limiter.wait_if_needed()
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            await state.clear()
            return
        
        await rate_limiter.wait_if_needed()
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="‚úÇÔ∏è –†–∞–∑–¥–µ–ª—è—é —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏..."
        )
        
        try:
            parts = split_file(filepath, chat_id)
            
            if not parts:
                await rate_limiter.wait_if_needed()
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞."
                )
                cleanup_files(filepath)
                await state.clear()
                return
            
            await rate_limiter.wait_if_needed()
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(parts)} —á–∞—Å—Ç–µ–π..."
            )
            
            for i, part_path in enumerate(parts, 1):
                try:
                    with open(part_path, 'rb') as part_file:
                        await rate_limiter.wait_if_needed()
                        await bot.send_document(
                            chat_id=chat_id,
                            document=part_file,
                            filename=os.path.basename(part_path),
                            caption=f"üé¨ {title} - –ß–∞—Å—Ç—å {i}/{len(parts)}",
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i}: {e}")
            
            cleanup_files(filepath, *parts)
            
            await rate_limiter.wait_if_needed()
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"‚úÖ *–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\nüìÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–∞—Å—Ç–µ–π: {len(parts)}",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await rate_limiter.wait_if_needed()
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"‚ùå –û—à–∏–±–∫–∞: {escape_markdown_v2(str(e))}"
            )
            cleanup_files(filepath)
    else:  # split_no
        if filepath:
            cleanup_files(filepath)
        await rate_limiter.wait_if_needed()
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
    
    await state.clear()

async def health_check(request):
    """–ü—Ä–æ—Å—Ç–æ–π health check –¥–ª—è Render.com"""
    return web.Response(text="Bot is running")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render.com"""
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    
    port = int(os.environ.get('PORT', 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    ]
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
        return
    
    try:
        global rate_limiter
        rate_limiter = TelegramRateLimiter()
        await start_web_server()
        await set_bot_commands()
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
